Source code
===========
This note applies to one of the following file
  * programs/mdrun/md.cpp (v5.1 or later)
  * programs/mdrun/md.c (v5.0)
  * kernel/md.c (v4.6 or earlier)



do_md() function
=======================
* main MD loop: ``while (!bLastStep ...) {''
  * on lines 693-1889 (v4.5).


Review of integrators
---------------------

### leapfrog integrators

1. f = force(x)
2. thermostat(v)
3. v += (f/m) dt
4. x' = x + v dt
5. x = x' (with constraints)

Steps 3 and 4 are what `update_coords()` does.


### velocity-verlet integrators

1. thermostat(v)
2. v += (f/m) (dt/2)      etrtVELOCITY2
3. x += v dt              etrtPOSITIION
--------------------------------------- MD step boundary in the code
4. f = force(x)
5. v += (f/m) (dt/2)      etrtVELOCITY1
6. thermostat(v)



Flow of main steps for VV
--------------------------

 *  `do_force()`

     o  line 1088 of V5.0


 *  `update_coords( etrtVELOCITY1 )`

     o  line 1131 of V5.0
     o  `do_update_vv_vel()`
     o  second half VV step of the *previous* step
     o  v += (f/m) dt/2


 *  `update_constraints()`

     o  line 1178 of V5.0


 *  `compute_globals()`

     o  compute the quantities at the end of a full step
     o  line 1224 of V5.0
     o  defined in `gromacs/mdlib/md_support.c`
     o  `if (bTemp)` compute the kinetic energy `calc_ke_part()`
        the kinetic energy is saved in the full-step tensor in this case
        which means that `bEkinAveVel = TRUE` in this case.
     o  calls `global_stat()`

         *  defined in `gromacs/mdlib/stat.c`


 *  `do_md_trajectory_writing()`

     o  line 1339 of V5.0
     o  defined in `gromacs/fileio/trajectory_writing.c`
     o  calls `mdoutf_write_to_trajectory_files()`

         *  defined in `gromacs/fileio/mdoutf.c`.
         *  collect state, x, v, f.
         *  Below are important calls.
         *  dd_collect_state(state_local, state_global);
            on the master, state_global->x, ->v, ->box is syncronized
            or alternatively
              dd_collect_vec(state_local->x, state_global->x);
              dd_collect_vec(local_v, global_v);
            where local_v  == state_local->v,
                  global_v == state_global->v
         *  dd_collect_vec(f_local, f_global);


 *  `update_tcouple()`

     o  line 1453 of V5.0
     o  defined in `mdlib/update.c`
     o  compute the velocity scaling factor, `ekind->tcstat[i].lambda`
     o  since this is velocity verlet case, velocity are rescaled
        by calling `rescale_velocities()` defined in `mdlib/coupling.c`


 *  `update_randomize_velocities()`

     o  line 1458 of V5.0
     o  Andersen thermostat

--------- Finishing up the previous step ----------------------

 *  `update_tcouple()`

     o  line 1531 of V5.0
     o  rescale velocities in place


 *  `update_coords( etrtVELOCITY2 )`

     o  line 1540 of V5.0
     o  `do_update_vv_vel()`
     o  first half VV step of this step
     o  v += (f/m) dt/2


 *  `update_coords( etrtPOSITION )`

     o  line 1563 of V5.0
     o  `do_update_vv_pos()` defined in `mdlib/update.c`
     o  x' = x + v dt


 *  `update_constraints()`

     o  line 1568 of V5.0
     o  x = x'



Flow of main steps for leapfrog
-------------------------------

 *  `do_force()`

     o  line 1088 of V5.0


 *  `do_md_trajectory_writing()`

     o  defined in `gromacs/fileio/trajectory_writing.c`
     o  calls `mdoutf_write_to_trajectory_files()`
         *  defined in `gromacs/fileio/mdoutf.c`.
         *  collect state, x, v, f.
         *  Below are important calls.
         *  dd_collect_state(state_local, state_global);
            on the master, state_global->x, ->v, ->box is syncronized
            or alternatively
              dd_collect_vec(state_local->x, state_global->x);
              dd_collect_vec(local_v, global_v);
            where local_v  == state_local->v,
                  global_v == state_global->v
         *  dd_collect_vec(f_local, f_global);


 *  `update_tcouple()`

     o  compute the velocity scaling factor, `ekind->tcstat[i].lambda`
     o  doesn't actually touch the velocity array
        only computes the scaling factor


 *  `update_coords( etrtPOSITION )`

     o  `do_update_md()`
     o  v += (f/m) dt
     o  x' = x + v dt
     o  update velocity (overwrite), apply the scaling factor, and add the accelecration
     o  update coordinates, save the new coordinates to `xprime`, which is `upd->xp`


 *  `update_constraints()`

     o  x = x' (under constraints)



Arguments and variables
-----------------------

  t_state *state_global;
  t_commrec *cr;
  gmx_vsite_t *vsite;
  gmx_constr_t constr;
  gmx_top_t *top_global;
  t_fcdata *fcd;
  t_mdatoms *mdatoms;
  t_inputrec *ir;
  t_forcerec *fr;

trivial ones
  * t_filenm fnm[nfile];          file names,
  * gmx_wallcycle_t wcycle;       mdlib/gmx_wallcycle.c
  * output_env_t oenv;


replica exchange variables
--------------------------
state_global
enerd->term
state



`top_global`
--------------

used to create
  `top_global` --> `top`


`top_global` is used in

  init_md(top_global);
  init_enerdata(top_global);
  top = dd_init_local_top(top_global);
  dd_partition_system(top_global, top);
  compute_globals(top_global)


`top` is used in

  dd_partition_system(top);
  set_constraints(top);               before main loop
  do_constrain_first(top);            before main loop
  update_coords(&top->idef);
  update_costrains(&top->idef);




reset_all_counters() function
=============================
* static function
* reset `wcycle` properties
* set `step_rel` to 0.



